#!/usr/bin/env bash

set \
  -o nounset \
  -o pipefail \
  -o errexit

# required environment variables
: "${ASDF_INSTALL_TYPE?}"
: "${ASDF_INSTALL_VERSION?}"
: "${ASDF_INSTALL_PATH?}"

# make a temporary download directory with a cleanup hook
TMP_DOWNLOAD_DIR="$(mktemp -d -t "asdf_rustic_XXXXXX")"
readonly TMP_DOWNLOAD_DIR

trap 'rm -rf "${TMP_DOWNLOAD_DIR?}"' EXIT

fail() {
  echo -e "\e[31mFail:\e[m $*"
  exit 1
}

install () {
  # local -r install_type="$1"
  local -r version="$2"
  local -r install_path="$3"

  local -r bin_install_path="${install_path}/bin"

  local -r download_url="$(get_download_url "${version}")"
  local -r filename=$(basename "${download_url}")
  
  echo "Downloading version ${version} of rustic: ${download_url}"
  if curl -sfL -o "${TMP_DOWNLOAD_DIR}/${filename}" "${download_url}"; then

    echo "Extracting version ${version} of rustic"
    oldpwd=$(pwd)

    cd "${TMP_DOWNLOAD_DIR}"
    tar -xzf "${filename}"
    cd "${oldpwd}"

    echo "Cleaning rustic previous binaries"
    rm -rf "${bin_install_path?}"

    echo "Creating rustic bin directory"
    mkdir -p "${bin_install_path}"

    if [[ ! -f "${TMP_DOWNLOAD_DIR}/rustic" ]]; then
      ls -lh "${TMP_DOWNLOAD_DIR}"
      fail "Error: failed to extract rustic archive"
    fi

    echo "Copying rustic executable to bin directory"
    cp "${TMP_DOWNLOAD_DIR}/rustic" "${bin_install_path}/rustic"
    chmod +x "${bin_install_path}/rustic"

    echo "Done"
  else
    fail "Error: rustic version ${version} not found"
  fi
}

get_filename () {
  local -r version="$1"
  local -r ext="${2:-.zip}"
  local -r arch="$(get_arch)"

  echo "${version}/dist_${arch}${ext}"
}

get_lib_environment () {
  # ldd --version will fail on alpine 3.10, but
  # it should still contain "musl" so it should be
  # safe to ignore errors and grep for the string regardless.
  # Other versions of Alpine will output "musl" in ldd --version
  if ldd --version 2>&1 | grep -qiF musl; then
    echo "musl"
  elif [[ -f "/etc/portage/make.conf" ]] && grep -qiF gnueabihf /etc/portage/make.conf; then
    echo "gnueabihf"
  else
    # all other cases, assume gnu
    echo "gnu"
  fi
}

get_download_url () {
  local -r version="$1"

  local platform
  case "$OSTYPE" in
    darwin*) platform="apple-darwin" ;;
    linux*) platform="unknown-linux" ;;
     *) fail "Unsupported platform" ;;
  esac

  # standardize architecture naming to match rustic releases
  local architecture
  case "$(uname -m)" in
    aarch64* | arm64) architecture="aarch64" ;;
    armv7*) architecture="armv7" ;;
    x86_64*) architecture="x86_64" ;;
    i686 | x86) architecture="i686" ;;
    *) fail "Unsupported architecture" ;;
  esac

  local lib_environment
  lib_environment="$(get_lib_environment)"

  # ensure architecture/environment is supported on platform
  if [[ "$platform" == "darwin" ]]; then
    case $architecture in
      x86_64|arm64) ;;
      *) fail "Unsupported architecture for ${platform}" ;;
    esac

    if [[ -n "$lib_environment" ]]; then
      fail "Unsupported environment for ${platform}"
    fi
  elif [[ "$platform" == "unknown-linux" ]]; then
    case $architecture in
      x86_64|aarch64|armv7|i686) ;;
      *) fail "Unsupported architecture for ${platform}" ;;
    esac

    case $lib_environment in
      gnu|musl|gnueabihf) ;;
      *) fail "Unsupported environment for ${platform}" ;;
    esac
  fi

  if [[ -n "$lib_environment" ]]; then
    lib_environment="-${lib_environment}"
  fi

  # e.g. rustic-v0.9.3-aarch64-apple-darwin.tar.gz
  # more examples: https://github.com/rustic-rs/rustic/releases/tag/v0.9.3
  echo https://github.com/rustic-rs/rustic/releases/download/v"${version}"/rustic-v"${version}"-"${architecture}"-"${platform}""${lib_environment}".tar.gz
}

install "${ASDF_INSTALL_TYPE}" "${ASDF_INSTALL_VERSION}" "${ASDF_INSTALL_PATH}"
