#!/usr/bin/env bash

set \
  -o nounset \
  -o pipefail \
  -o errexit

# required environment variables
: "${ASDF_INSTALL_TYPE?}"
: "${ASDF_INSTALL_VERSION?}"
: "${ASDF_INSTALL_PATH?}"

# make a temporary download directory with a cleanup hook
TMP_DOWNLOAD_DIR="$(mktemp -d -t "asdf_restic_XXXXXX")"
readonly TMP_DOWNLOAD_DIR

trap 'rm -rf "${TMP_DOWNLOAD_DIR?}"' EXIT

install () {
  # local -r install_type="$1"
  local -r version="$2"
  local -r install_path="$3"

  local -r bin_install_path="${install_path}/bin"

  local -r download_url="$(get_download_url "${version}")"
  local -r filename=$(basename "${download_url}")
  
  echo "Downloading version ${version} of restic"
  if curl -sfL -o "${TMP_DOWNLOAD_DIR}/${filename}" "${download_url}"; then

    echo "Extracting version ${version} of restic"
    case "${filename##*.}" in 
    bz2)
      OLDPWD=$(pwd)
      cd "${TMP_DOWNLOAD_DIR}"
      bzip2 -d "${filename}"
      cd "${OLDPWD}"
    esac

    echo "Cleaning restic previous binaries"
    rm -rf "${bin_install_path?}"

    echo "Creating restic bin directory"
    mkdir -p "${bin_install_path}"

    local f
    for f in "${TMP_DOWNLOAD_DIR}"/*; do
    
      if [ -f "${f}" ]; then
        cp "${f}" "${bin_install_path}"/restic
        chmod +x "${bin_install_path}"/restic
      fi
    done
    echo "Done"
  else
    echo "Error: restic version ${version} not found" >&2
    exit 1
  fi
}

fail() {
  echo -e "\e[31mFail:\e[m $*"
  exit 1
}

get_filename () {
  local -r version="$1"
  local -r ext="${2:-.zip}"
  local -r arch="$(get_arch)"

  echo "${version}/dist_${arch}${ext}"
}

get_download_url () {
  local -r version="$1"
  local platform
  local IS_EXISTS=1

  case "$OSTYPE" in
    darwin*) platform="darwin" ;;
    linux*) platform="linux" ;;
    openbsd*) platform="openbsd" ;;
    FreeBSD) platform="freebsd" ;;
    netbsd) platform="netbsd" ;;
    solaris*) platform="solaris" ;;
     *) fail "Unsupported platform" ;;
  esac

  local architecture

  case "$(uname -m)" in
    aarch64* | arm64) architecture="arm64" ;;
    armv5* | armv6* | armv7*) architecture="arm" ;;
    x86_64*) architecture="amd64" ;;
    i386 | i686 | x86) architecture="386" ;;
    mips) architecture="mips" ;;
    mips64) architecture="mips64" ;;
    s390x) architecture="s390x" ;;
    ppc64) architecture="ppc64" ;;
    *) fail "Unsupported architecture" ;;
  esac
  
  if [ "$platform" == "darwin" ]; then
    case $architecture in
      amd64|arm64) IS_EXISTS=1 ;;
      *) fail "Unsupported architecture for ${platform}" ;;
    esac
  elif [ "$platform" == "linux" ]; then
    case $architecture in
      amd64|arm64|arm|386|mips|mips64|s390x|ppc64) IS_EXISTS=1 ;;
      *) fail "Unsupported architecture for ${platform}" ;;
    esac
  elif [ "$platform" == "openbsd" ]; then
    case $architecture in
      amd64|386) IS_EXISTS=1 ;;
      *) fail "Unsupported architecture for ${platform}" ;;
    esac
  elif [ "$platform" == "freebsd" ]; then
    case $architecture in
      amd64|arm|386) IS_EXISTS=1 ;;
      *) fail "Unsupported architecture for ${platform}" ;;
    esac
  elif [ "$platform" == "netbsd" ]; then
    case $architecture in
      amd64|386) IS_EXISTS=1 ;;
      *) fail "Unsupported architecture for ${platform}" ;;
    esac
  elif [ "$platform" == "solaris" ]; then
    case $architecture in
      amd64) IS_EXISTS=1 ;;
      *) fail "Unsupported architecture for ${platform}" ;;
    esac
  fi

  if [ $IS_EXISTS -eq 1 ]; then
    echo https://github.com/restic/restic/releases/download/v"${version}"/restic_"${version}"_"${platform}"_"${architecture}".bz2
  fi

}

install "${ASDF_INSTALL_TYPE}" "${ASDF_INSTALL_VERSION}" "${ASDF_INSTALL_PATH}"